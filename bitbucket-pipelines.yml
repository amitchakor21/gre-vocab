image:
  name: ideasinc/ideascloud:nodejs
  username: $DOCKERHUB_READONLY_USER
  password: $DOCKERHUB_READONLY_PASSWORD
  email: $DOCKERHUB_READONLY_EMAIL

# resources
definitions:
  steps:
    - step: &Init
        name: Init
        caches:
          - node
        script:
          - echo branch name $BITBUCKET_BRANCH
          # set project properties
          - source ./bitbucket-pipelines.properties
          # init node and angular dependencies
          - . $BITBUCKET_CLONE_DIR/bin/init_angular_dependencies.sh
    - step: &Lint
        name: Lint
        caches:
          - node
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties

          # note that the --base value below can't be hardcoded to origin/master as this step is also used for the master build.
          - #when running master build we would have to do something like like origin/master~1
          - #npm run nx -- affected --target=lint --base=master
          - npm run nx -- lint --with-deps
    - step: &Unit-Test
        name: Unit Test
        size: 2x
        caches:
          - node
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # call tests
          # note that the --base value below can't be hardcoded to origin/master as this step is also used for the master build.
          - #when running master build we would have to do something like like origin/master~1
          - #npm run nx -- affected --target=test --base=master
          - npm run nx -- test --with-deps
    - step: &Build
        name: Build
        size: 2x
        caches:
          - node
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # call build
          - npm --no-git-tag-version version $VERSION
          - #npm run nx -- affected --target=build --base=master
          - npm run nx -- build --configuration=production
        artifacts:
          - dist/**
    - step: &Integration
        name: Integration Test
        services:
          - docker
        size: 2x
        caches:
          - node
          - docker
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # install pm2 to launch our angular app in the background (reguired for integration tests)
          - npm install pm2 -g
          # launch angular web app using pm2 to start as background process
          - pm2 --name angularServer start npm -- run start-server:ci
          # Build our cypress container to execute cypress tests
          - echo $DOCKERHUB_READONLY_PASSWORD | docker login --username $DOCKERHUB_READONLY_USER --password-stdin && docker build -t ideaslocal:cypress -f Dockerfile.integration .
          # use docker to launch cypress tests
          - docker run --rm --add-host=hostDockerInternal:$BITBUCKET_DOCKER_HOST_INTERNAL
            -v $BITBUCKET_CLONE_DIR/videos:/dist/cypress/apps/ui-e2e/videos
            -v $BITBUCKET_CLONE_DIR/test-results:/test-results
            ideaslocal:cypress
            sh -c
            "npm ci
             npm run nx -- e2e --headless --browser chrome"
        artifacts:
          - dist/cypress/apps/ui-e2e/videos/**
    - step: &Terraform-Plan-Dev
        name: Terraform-Plan-Dev
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # account auth
          - . $BITBUCKET_CLONE_DIR/bin/aws-auth.sh --deploymentLevel DEV
          # call terraform plan
          - . $BITBUCKET_CLONE_DIR/bin/terraform-plan.sh
    - step: &Terraform-Dev
        name: Terraform Dev
        trigger: manual
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # account auth
          - . $BITBUCKET_CLONE_DIR/bin/aws-auth.sh --deploymentLevel DEV
          # call terraform plan
          - . $BITBUCKET_CLONE_DIR/bin/terraform-plan.sh
          # call terraform apply
          - . $BITBUCKET_CLONE_DIR/bin/terraform-apply.sh
        artifacts:
          - infra/development.plan
    - step: &Deploy-Dev
        name: Deploy Dev App
        trigger: manual
        deployment: Test
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # account auth
          - . $BITBUCKET_CLONE_DIR/bin/aws-auth.sh --deploymentLevel DEV
          # deploy artifacts
          - . $BITBUCKET_CLONE_DIR/bin/s3deploy.sh --deploymentLevel DEV
    - step: &Terraform-Stage
        name: Terraform Stage
        trigger: manual
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # account auth
          - . $BITBUCKET_CLONE_DIR/bin/aws-auth.sh --deploymentLevel STAGING
          # call terraform plan
          - . $BITBUCKET_CLONE_DIR/bin/terraform-plan.sh
          # call terraform apply
          - . $BITBUCKET_CLONE_DIR/bin/terraform-apply.sh
        artifacts:
          - infra/staging.plan
    - step: &Deploy-Stage
        name: Deploy Stage App
        trigger: manual
        deployment: Staging
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # account auth
          - . $BITBUCKET_CLONE_DIR/bin/aws-auth.sh --deploymentLevel STAGING
          # deploy artifacts
          - . $BITBUCKET_CLONE_DIR/bin/s3deploy.sh --deploymentLevel STAGING
    - step: &Terraform-Prod
        name: Terraform Prod
        trigger: manual
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # account auth
          - . $BITBUCKET_CLONE_DIR/bin/aws-auth.sh --deploymentLevel PROD
          # call terraform plan
          - . $BITBUCKET_CLONE_DIR/bin/terraform-plan.sh
          # call terraform apply
          - . $BITBUCKET_CLONE_DIR/bin/terraform-apply.sh
        artifacts:
          - infra/production.plan
    - step: &Deploy-Prod
        name: Deploy Prod App
        trigger: manual
        deployment: Production
        script:
          # set project properties
          - source ./bitbucket-pipelines.properties
          # account auth
          - . $BITBUCKET_CLONE_DIR/bin/aws-auth.sh --deploymentLevel PROD
          # deploy artifacts
          - . $BITBUCKET_CLONE_DIR/bin/s3deploy.sh --deploymentLevel PROD

pipelines:
  branches:
    master:
      - step: *Init
      - step: *Lint
      - parallel:
        # run Unit and Built in parallel to save time
        - step: *Unit-Test
        - step: *Build
#      - step: *Integration
      - step: *Terraform-Plan-Dev
      - step: *Terraform-Dev
      - step: *Deploy-Dev
      - step: *Terraform-Stage
      - step: *Deploy-Stage
      - step: *Terraform-Prod
      - step: *Deploy-Prod
  pull-requests:
    '**':
      - step: *Init
      - step: *Lint
      - parallel:
        # run Unit and Build in parallel to save time.
        - step: *Unit-Test
        - step: *Build
#      - step: *Integration
      - step: *Terraform-Plan-Dev
  custom:
    terraformOnly:
      - step: *Terraform-Plan-Dev
      - step: *Terraform-Dev
      - step: *Terraform-Stage
      - step: *Terraform-Prod
    terraformOnlyDestroyDev:
      # note that because our terraform includes an edge lambda, this will likely fail the first time it is run.
      # this is a known issue as edge lambdas take very long to destroy so these commands will timeout on first run.
      - step:
          name: Destroy Dev Plan
          script:
            # set project properties
            - source ./bitbucket-pipelines.properties
            # account auth
            - . $BITBUCKET_CLONE_DIR/bin/aws-auth.sh --deploymentLevel DEV
            # call terraform plan destroy
            - . $BITBUCKET_CLONE_DIR/bin/terraform-destroy-plan.sh
          artifacts:
            - infra/development.plan
      - step:
          name: Destroy Dev
          trigger: manual
          deployment: Test
          script:
            # set project properties
            - source ./bitbucket-pipelines.properties
            # account auth
            - . $BITBUCKET_CLONE_DIR/bin/aws-auth.sh --deploymentLevel DEV
            # call terraform apply
            - . $BITBUCKET_CLONE_DIR/bin/terraform-destroy.sh
